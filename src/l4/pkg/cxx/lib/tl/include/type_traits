// vi:ft=cpp

/*
 * (c) 2008-2009 Alexander Warg <warg@os.inf.tu-dresden.de>,
 *               Torsten Frenzel <frenzel@os.inf.tu-dresden.de>
 *     economic rights: Technische Universit√§t Dresden (Germany)
 *
 * This file is part of TUD:OS and distributed under the terms of the
 * GNU General Public License 2.
 * Please see the COPYING-GPL-2 file for details.
 *
 * As a special exception, you may use this file as part of a free software
 * library without restriction.  Specifically, if other files instantiate
 * templates or use macros or inline functions from this file, or you compile
 * this file and link it with other files to produce an executable, this
 * file does not by itself cause the resulting executable to be covered by
 * the GNU General Public License.  This exception does not however
 * invalidate any other reasons why the executable file might be covered by
 * the GNU General Public License.
 */


#pragma once

#include "bits/type_traits.h"


#define CXX_GCC_VERSION (__GNUC__ * 100 + __GNUC_MINOR__)


namespace cxx {

template< typename T, T V >
struct integral_constant
{
  static T const value = V;
  typedef T value_type;
  typedef integral_constant<T, V> type;
};

typedef integral_constant<bool, true> true_type;
typedef integral_constant<bool, false> false_type;

template< typename T > struct remove_reference;

template< typename T > struct idendity { typedef T type; };

template< typename T1, typename T2 > struct is_same;

template< typename T > struct remove_const;

template< typename T > struct remove_volatile;

template< typename T > struct remove_cv;

template< typename T > struct remove_pointer;



template< typename, typename >
struct is_same : public false_type {};

template< typename T >
struct is_same<T, T> : public true_type {};

template< typename T >
struct remove_reference { typedef T type; };

template< typename T >
struct remove_reference<T &> { typedef T type; };

#ifdef __GXX_EXPERIMENTAL_CXX0X__
template< typename T >
struct remove_reference<T &&> { typedef T type; };
#endif

template< typename T > struct remove_const { typedef T type; };
template< typename T > struct remove_const<T const> { typedef T type; };

template< typename T > struct remove_volatile { typedef T type; };
template< typename T > struct remove_volatile<T volatile> { typedef T type; };

template< typename T >
struct remove_cv { typedef typename remove_const<typename remove_volatile<T>::type>::type type; };

template< typename T, typename >
struct __remove_pointer_h { typedef T type; };

template< typename T, typename I >
struct __remove_pointer_h<T, I*> { typedef I type; };

template< typename  T >
struct remove_pointer : public __remove_pointer_h<T, typename remove_cv<T>::type> {};

#ifdef __GXX_EXPERIMENTAL_CXX0X__
#if CXX_GCC_VERSION >= 405

template< typename T >
inline T &&
forward(typename cxx::remove_reference<T>::type &t)
{ return static_cast<T &&>(t); }

template< typename T >
inline T &&
forward(typename cxx::remove_reference<T>::type &&t)
{ return static_cast<T &&>(t); }

#else

template< typename T >
inline T &&
forward(typename cxx::idendity<T>::type &&t)
{ return t; }

#endif

template< typename T >
inline typename cxx::remove_reference<T>::type &&
move(T &t) { return static_cast<typename cxx::remove_reference<T>::type &&>(t); }
#endif

template< bool, typename T = void >
struct enable_if {};

template< typename T >
struct enable_if<true, T> { typedef T type; };

}

